/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define MAC 1
#define NAV 2
#define NUM 3
#define FUN 4
#define KPD 5

// Modifiers for left/right side
#define LM1 LGUI
#define LM2 LALT
#define LM3 LSHFT
#define LM4 LCTRL
#define RM1 RCTRL
#define RM2 RSHFT
#define RM3 LALT
#define RM4 RGUI

// Shortenings
#define KP_MUL KP_MULTIPLY
#define KP_DIV KP_DIVIDE
#define ___

/ {
	behaviors {
		// layer tap - hold preferred
		lth: behavior_layer_tap_hold_preferred {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TAP_HOLD_PREFERRED";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <180>;
			quick_tap_ms = <150>;
			bindings = <&mo>, <&kp>;
		};
		// layer tap - tap preferred
		ltt: behavior_layer_tap_tap_preferred {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TAP_TAP_PREFERRED";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick_tap_ms = <250>;
			bindings = <&mo>, <&kp>;
		};
		lm: left_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick-tap-ms = <250>;
			global-quick-tap;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <6 7 8 9 10 11  18 19 20 21 22 23  30 31 32 33 34 35>;
		};
		rm: right_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick-tap-ms = <250>;
			global-quick-tap;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5  12 13 14 15 16 17  24 25 26 27 28 29>;
		};
		// Layers with mods
		mnum: momentary_num_mod_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "MOMENTARY_NUM_MOD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick-tap-ms = <250>;
			global-quick-tap;
			bindings = <&num_with_mod>, <&kp>;
		};
		mnav: momentary_nav_mod_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "MOMENTARY_NAV_MOD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick-tap-ms = <250>;
			global-quick-tap;
			bindings = <&nav_with_mod>, <&kp>;
		};
		// Tap dance
		td_nav_kp: tap_dance_nav_keypad {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_NAV_KEYPAD";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&mo NAV>, <&mo KPD>;
		};
		//td_comma_commaspace: tap_dance_comma_commaspace {
		//	compatible = "zmk,behaviour-tap-dance";
		//	label = "TAP_DANCE_COMMA_COMMASPACE";
		//	#binding-cells = <0>;
		//	tapping-term-ms = <200>;
		//	bingings = <&mo COMMA>, <&comma_space>;
		//};
	};

// -----------------------------------------------------------------------------------------
// | 0   | 1   | 2   | 3   | 4   | 5   |   | 6   | 7   | 8   | 9   | 10  | 11  |
// | 12  | 13  | 14  | 15  | 16  | 17  |   | 18  | 19  | 20  | 21  | 22  | 23  |
// | 24  | 25  | 26  | 27  | 28  | 29  |   | 30  | 31  | 32  | 33  | 34  | 35  |
//                   | 36  | 37  | 38  |   | 39  | 40  | 41  |
	combos {
		compatible = "zmk,combos";
//		combo_mo_fun {
//			//timeout-ms = <20>;
//			bindings = <&mo FUN>;
//			key-positions = <36 41>;
//			layers = <DEF>;
//		};
		// left hand triplets
		combo_scroll_lock {
			timeout-ms = <20>;
			bindings = <&kp SCROLLLOCK>;
			key-positions = <1 2 3>;
		};
		combo_print_screen {
			timeout-ms = <20>;
			bindings = <&kp PRINTSCREEN>;
			key-positions = <2 3 4>;
		};
		combo_mo_macros {
			timeout-ms = <30>;
			bindings = <&mo MAC>;
			key-positions = <14 15 16>;
			layers = <DEF>;
		};
		combo_mo_keypad {
			timeout-ms = <30>;
			bindings = <&mo KPD>;
			key-positions = <26 27 28>;
			layers = <DEF>;
		};
		// right hand triplets
		combo_pause_break {
			timeout-ms = <20>;
			bindings = <&kp PAUSE_BREAK>;
			key-positions = <7 8 9>;
		};
		combo_caps_word_right {
			timeout-ms = <20>;
			bindings = <&caps_word>;
			key-positions = <19 20 21>;
			layers = <DEF>;
		};
		combo_caps_lock {
			timeout-ms = <20>;
			bindings = <&kp CAPSLOCK>;
			key-positions = <31 32 33>;
		};
		combo_sysreq {
			timeout-ms = <20>;
			bindings = <&kp SYSREQ>;
			key-positions = <8 9 10>;
		};
	};

	macros {
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
		ZMK_MACRO1(nav_with_mod,
			wait-ms = <0>;
			bindings
				= <&macro_press &mo NAV>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_release &mo NAV>
			;
		)
		ZMK_MACRO1(num_with_mod,
			wait-ms = <0>;
			bindings
				= <&macro_press &mo NUM>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_release &mo NUM>
			;
		)
		// String macros
		ZMK_MACRO(comma_space, bindings = <&kp COMMA &kp SPACE>;)
		ZMK_MACRO(arrow_slim_l, bindings = <&kp LS(COMMA) &kp MINUS>;)
		ZMK_MACRO(arrow_slim_r, bindings = <&kp MINUS &kp LS(DOT)>;)
		ZMK_MACRO(arrow_fat_l, bindings = <&kp LS(COMMA) &kp EQUAL>;)
		ZMK_MACRO(arrow_fat_r, bindings = <&kp EQUAL &kp LS(DOT)>;)
		ZMK_MACRO(arrow_pipe_l, bindings = <&kp LS(COMMA) &kp PIPE>;)
		ZMK_MACRO(arrow_pipe_r, bindings = <&kp PIPE &kp LS(DOT)>;)
		ZMK_MACRO(block_start, bindings = <&kp SPACE &kp LBRC &kp RET>;)
		ZMK_MACRO(block_end, bindings = <&kp RBRC &kp P &kp RET>;)
		ZMK_MACRO(eq_spaced, bindings = <&kp SPACE &kp EQUAL &kp SPACE>;)
		ZMK_MACRO(neq_spaced, bindings = <&kp SPACE &kp EXCL &kp EQUAL &kp SPACE>;)
		ZMK_MACRO(eq_dqt, bindings = <&kp EQUAL &kp DQT>;)
		ZMK_MACRO(neq_dqt, bindings = <&kp EXCL &kp EQUAL &kp DQT>;)
		ZMK_MACRO(le_spaced, bindings = <&kp SPACE &kp RS(COMMA) &kp EQUAL &kp SPACE>;)
		ZMK_MACRO(ge_spaced, bindings = <&kp SPACE &kp RS(DOT) &kp EQUAL &kp SPACE>;)
	};

	keymap {
		compatible = "zmk,keymap";

// Colemak on OS side
// -----------------------------------------------------------------------------------------
// |     |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |     |
// |     |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '  |
// |     |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |     |
// -----------------------------------------------------------------------------------------
		default_layer {
			bindings = <
	&kp TAB       &mnav LM1 Q  &mnav LM2 W &mnav LM3 E &mnav LM4 R &mnav 0 T  ___  &mnum 0 Y    &mnum RM1 U &mnum RM2 I &mnum RM3 O  &mnum RM4 P     &kp RA(Q)
	&kp BSPC      &lm LM1 A    &lm LM2 S   &lm LM3 D   &lm LM4 F   &ltt MAC G ___  &ltt MAC H   &rm RM1 J   &rm RM2 K   &rm RM3 L    &rm RM4 SEMI    &kp RA(P)
	&mt LSHFT ESC &mnav RALT Z &lm RALT X  &kp C       &kp V       &kp B      ___  &kp N        &kp M       &kp COMMA   &rm RALT DOT &mnum RALT FSLH &kp RSHFT
	&lth NUM RET  &kp SPACE    &td_nav_kp                                     ___  &lth NAV RET &sl NUM     &mo FUN
			>;
		};

		macro_layer {
			bindings = <
	&none  &none  &none  &none       &none  &none  ___  &arrow_pipe_l  &arrow_pipe_r  &block_start  &block_end  &neq_spaced  &eq_spaced
	&none  &none  &none  &caps_word  &none  &none  ___  &arrow_fat_l   &arrow_fat_r   &caps_word    &none       &le_spaced   &ge_spaced
	&none  &none  &none  &none       &none  &none  ___  &arrow_slim_l  &arrow_slim_r  &none         &none       &none        &none
	&none  &none  &none                            ___  &none          &none          &none
			>;
		};

		navigation_layer {
			bindings = <
	&trans      &kp LC(LS(Z)) &kp LC(S) &kp LC(E) &kp F2     &kp F4   ___  &kp INS   &kp PG_UP &kp UP    &kp PG_DN &kp HASH  &kp TAB
	&trans      &sk LM1       &sk LM2   &sk LM3   &sk LM4    &kp DEL  ___  &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT &kp END   &kp SPACEj
	&trans      &kp LC(Z)     &kp LC(X) &kp LC(C) &kp LC(V)  &kp RET  ___  &none     &none     &none     &sk RALT  &kp FSLH  &kp RS(TAB)
	&trans      &trans        &trans                                  ___  &kp RET   &lth NUM SPACE  &trans
			>;
		};

// Numbers on the left, because of mouse on the right hand
// -----------------------------------------------------------------------------------------
// | `   | 1   | 2   | 3   | 4   | 5   |   | &   | $   | {   | }   | :   | =   |
// |     | 6   | 7   | 8   | 9   | 0   |   | #   | -   | (   | )   | '   | "   |
// | â‚¬   | *   | +   | [   | ]   | \   |   | ~   | _   | <   | >   | |   | %   |
// -----------------------------------------------------------------------------------------
		number_layer {
			bindings = <
	&kp GRAVE       &kp N1     &kp N2        &kp N3     &kp N4     &kp N5    ___  &kp AMPS  &kp DOLLAR    &kp LBRC      &kp RBRC         &kp RS(P)   &kp EQUAL
	&trans          &lm LM1 N6 &lm LM2 N7    &lm LM3 N8 &lm LM4 N9 &kp N0    ___  &kp HASH  &rm RM1 MINUS &rm RM2 LPAR  &rm RM3 RPAR     &rm RM4 SQT &kp DQT
	&mt LSHFT PRCNT &kp STAR   &lm RALT PLUS &kp LBKT   &kp RBKT   &kp BSLH  ___  &kp TILDE &kp UNDER     &kp RS(COMMA) &rm RALT RS(DOT) &kp PIPE    &mt RSHFT EXCL
	&comma_space    &kp SPACE  &kp DOT                                       ___  &comma_space  &kp SPACE &trans
			>;
		};

		function_layer {
			bindings = <
	&kp C_VOL_UP &kp C_MUTE   &kp C_PREV   &kp C_PLAY_PAUSE &kp C_NEXT   &kp PSCRN     ___  &none    &kp F7 &kp F8 &kp F9 &kp F12 &none
	&kp C_VOL_DN &kp LM1      &kp LM2      &kp LM3          &kp LM4      &out OUT_TOG  ___  &none    &kp F4 &kp F5 &kp F6 &kp F11 &none
	&none        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2     &bt BT_SEL 3 &bt BT_CLR    ___  &unstick &kp F1 &kp F2 &kp F3 &kp F10 &none
	&trans       &trans       &trans                                                   ___  &trans   &trans &trans
			>;
		};

		keypad_layer {
			bindings = <
	&trans  &kp LALT   &kp PG_UP  &kp UP    &kp PG_DN  &none    ___  &kp KP_NLCK &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS &kp KP_DIVIDE
	&trans  &kp LCTRL  &kp LEFT   &kp DOWN  &kp RIGHT  &none    ___  &none       &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_N0    &kp KP_MULTIPLY
	&trans  &kp LGUI   &kp COMMA  &kp SPACE &kp DOT    &kp RET  ___  &kp KP_DOT  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_PLUS  &kp KP_ENTER
	&trans  &trans     &trans                                   ___  &kp KP_PLUS &kp KP_N0  &kp KP_DOT
			>;
		};
	};
};

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

// https://github.com/joelspadin/zmk-locale-generator
// # include "keys_fi.h"
#include "lib/keys_os_colemak.h"


#define DEF 0
#define SYM 1
#define NAV 2
#define NAVt 3
#define FUN 4
#define KPD 5

#define LAYERS_ALL DEF SYM NAV NAVt FUN KPD
#define LAYERS_ALPHANUM DEF SYM KPD

// Modifiers for left/right side
#define LM1 LGUI
#define LM2 LALT
#define LM3 LSHFT
#define LM4 LCTRL
#define RM1 RCTRL
#define RM2 RSHFT
#define RM3 LALT
#define RM4 RGUI

// Shortenings
#define KP_MUL KP_MULTIPLY
#define KP_DIV KP_DIVIDE
#define EURO RA(N5)
#define ___

#define KEYS_L 0 1 2 3 4 5  12 13 14 15 16 17  24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11  18 19 20 21 22 23  30 31 32 33 34 35
#define KEYS_T 36 37 38 39 40

// Combo with a shorter timeout
#define COMBO_S(NAME, BINDINGS, KEYPOS, LAYERS) \
	combo_##NAME { \
		bindings = <BINDINGS>; \
		timeout-ms = <20>; \
		key-positions = <KEYPOS>; \
		layers = <LAYERS>; \
	};

// Combo with a longer timeout
#define COMBO_L(NAME, BINDINGS, KEYPOS, LAYERS) \
	combo_##NAME { \
		bindings = <BINDINGS>; \
		timeout-ms = <35>; \
		key-positions = <KEYPOS>; \
		layers = <LAYERS>; \
	};

/ {
	behaviors {
		#include "lib/behaviors.dtsi"
	};

	// -----------------------------------------------------------------------------------------
	// | 0   | 1   | 2   | 3   | 4   | 5   |     | 6   | 7   | 8   | 9   | 10  | 11  |
	// | 12  | 13  | 14  | 15  | 16  | 17  |     | 18  | 19  | 20  | 21  | 22  | 23  |
	// | 24  | 25  | 26  | 27  | 28  | 29  |     | 30  | 31  | 32  | 33  | 34  | 35  |
	//                         | 36  | 37  | 38  | 39  | 40  |
	combos {
		compatible = "zmk,combos";

		//COMBO_S(backspace, &kp BSPC, 13 14, LAYERS_ALPHANUM)

		COMBO_L(lbkt, &kp LBKT, 1 2, LAYERS_ALPHANUM)
		COMBO_L(semi, &kp OC_SEMI, 2 3, LAYERS_ALPHANUM)
		COMBO_S(rbkt, &kp RBKT, 3 4, LAYERS_ALPHANUM)
		COMBO_L(lpar, &kp LPAR, 25 26, LAYERS_ALPHANUM)
		COMBO_S(colon, &kp OC_COLON, 26 27, LAYERS_ALPHANUM)
		COMBO_S(rpar, &kp RPAR, 27 28, LAYERS_ALPHANUM)

		COMBO_S(lbrc, &kp LBRC, 7 8, LAYERS_ALPHANUM)
		COMBO_L(rbrc, &kp RBRC, 9 10, LAYERS_ALPHANUM)
		//COMBO_S(semi, &kp OC_SEMI, 9 10, LAYERS_ALPHANUM)
		COMBO_S(lt, &kp LT, 31 32, LAYERS_ALPHANUM)
		COMBO_L(gt, &kp GT, 33 34, LAYERS_ALPHANUM)
		//COMBO_S(ret, &kp RET, 33 34, LAYERS_ALL)
	};

	macros {
		#include "lib/macros.dtsi"

		ZMK_MACRO1(nav_with_mod,
			wait-ms = <0>;
			bindings
				= <&macro_press &mo NAV>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_release &mo NAV>
			;
		)
		ZMK_MACRO1(sym_with_mod,
			wait-ms = <0>;
			bindings
				= <&macro_press &mo SYM>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_release &mo SYM>
			;
		)
		// String macros
		ZMK_MACRO(comma_spc, bindings = <&kp COMMA &kp SPACE>;)
	};

	// Keymap assumes Colemak on OS side, as I also use regular keyboards
	keymap {
		compatible = "zmk,keymap";

// |     |  Q  |  W  |  F  |  P  |  G  |   |  J  |  L  |  U  |  Y  |  Ä  |  Ö  |
// |     |  A  |  R  |  S  |  T  |  D  |   |  H  |  N  |  E  |  I  |  O  |  '  |
// |     |  Z  |  X  |  C  |  V  |  B  |   |  K  |  M  |  ,  |  .  |  /  |     |
		alpha_layer {
			bindings = <
&lt KPD TAB    &ms LM1 OC_Q &ms LM2 OC_W &ms LM3 OC_F &ms LM4 OC_P &ms RALT OC_G ___  &ms RALT OC_J &ms RM1 OC_L &ms RM2 OC_U &ms RM3 OC_Y &ms RM4 OC_A_UMLAUT &kp OC_O_UMLAUT
&kp BSPC       &lm LM1 OC_A &lm LM2 OC_R &lm LM3 OC_S &lm LM3 OC_T &lm RALT OC_D ___  &rm RALT OC_H &rm RM1 OC_N &rm RM2 OC_E &rm RM3 OC_I &rm RM4 OC_O        &kp SQT
&mt LSHFT ESC  &lt KPD OC_Z &mn 0 OC_X   &mn 0 OC_C   &mn 0 OC_V   &kp OC_B      ___  &kp OC_K      &kp OC_M     &ms 0 COMMA  &kp DOT      &lt NAV FSLH        &mt RSHFT RET
&kp LSHFT      &kp SPACE    &td_nav_tog  &sl SYM      &kp RSHFT
			>;
		};
//&kp LSHFT      &kp SPACE    &td_nav_tog  &sl SYM      &kp RSHFT
//&kp LSHFT      &kp SPACE    &td_nav_kp   &sl SYM      &kp RSHFT
//&lth KPD RET   &kp SPACE    &td_nav_kp   &sl SYM      &sym_with_mod RSHFT

// Numbers on the left, because of mouse on the right hand
// | `   | !   | @   | #   | $   | %   |   | ^   | -   | *   | +   | |   | =   |
// |     | 1   | 2   | 3   | 4   | 5   |   | 6   | 7   | 8   | 9   | 0   | "   |
// |     | \   | ~   | :   | ;   | €   |   |     | _   | ,   | .   | :   |     |

// | `   | !   | (   | )   | :   | %   |   | &   | $   | {   | }   | ;   | =   |
// |     | 1   | 2   | 3   | 4   | 5   |   | 6   | 7   | 8   | 9   | 0   | "   |
// |     | \   | ~   | *   | +   | €   |   | ^   | -   | _   | #   | |   |     |
		symbol_layer {
			bindings = <
&kp GRAVE   &kp EXCL     &kp LPAR    &kp RPAR     &kp OC_COLON &kp PRCNT    ___ &kp AMPS     &kp DOLLAR  &kp LBRC    &kp RBRC    &kp OC_SEMI  &kp EQUAL
&trans      &lm LM1 N1   &lm LM2 N2  &lm LM3 N3   &lm LM4 N4   &lm RALT N5  ___ &rm RALT N6  &rm RM1 N7  &rm RM2 N8  &rm RM3 N9  &rm RM4 N0   &kp DQT
&trans      &kp BSLH     &kp TILDE   &kp STAR     &kp PLUS     &kp EURO     ___ &kp CARET    &kp MINUS   &kp UNDER   &kp HASH    &kp PIPE     &trans
&comma_spc  &kp SPACE    &kp DOT     &comma_spc   &trans
			>;
		};

		navigation_layer {
			bindings = <
&trans  &lm LM1 FSLH &lm LM2 SPACE &lm LM3 HASH &lm LM4 SPACE &lm RALT F4  ___  &kp INS   &kp PG_UP  &kp UP     &kp PG_DN  &none    &kp ESC
&trans  &sk LM1      &sk LM2       &sk LM3      &sk LM4       &lm RALT DEL ___  &kp BSPC  &kp LEFT   &kp DOWN   &kp RIGHT  &none    &kp DEL
&trans  &kp LC(Z)    &kp LC(X)     &kp LC(C)    &kp LC(V)     &kp RET      ___  &none     &kp HOME   &kp SPACE  &kp END    &kp FSLH &trans
&trans  &kp SPACE    &trans        &trans       &mo FUN
			>;
		};

		navigation_tog_layer {
			bindings = <
&trans  &trans  &trans  &trans  &trans  &trans ___ &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans ___ &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans ___ &trans  &trans  &trans  &trans  &trans  &trans
&to DEF &trans  &to DEF &trans  &to DEF
			>;
		};

		function_layer {
			bindings = <
&rgb_ug RGB_TOG &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &sys_reset  ___  &kp C_VOL_UP     &kp F1  &kp F2  &kp F3  &kp F4  &kp PAUSE_BREAK
&none           &kp LM1         &kp LM2         &kp LM3         &kp LM4         &kp RALT    ___  &kp C_VOL_DN     &kp F5  &kp F6  &kp F7  &kp F8  &kp PRINTSCREEN
&to DEF         &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &bootloader ___  &kp C_PLAY_PAUSE &kp F9  &kp F10 &kp F11 &kp F12 &unstick
&none           &none           &to DEF         &none           &tog FUN
			>;
		};

		keypad_layer {
			bindings = <
&trans    &kp LALT   &kp PG_UP  &kp UP    &kp PG_DN  &none    ___  &kp KP_NLCK &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS &kp KP_DIVIDE
&trans    &kp LCTRL  &kp LEFT   &kp DOWN  &kp RIGHT  &kp DEL  ___  &none       &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS  &kp KP_MULTIPLY
&trans    &kp LGUI   &kp COMMA  &kp SPACE &kp DOT    &kp RET  ___  &kp KP_DOT  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER &kp KP_ENTER
&tog KPD  &trans     &trans                                   ___  &kp KP_N0   &kp KP_DOT
			>;
		};

	};
};

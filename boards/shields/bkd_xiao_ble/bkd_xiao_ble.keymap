/*
 * Copyright (c) 2024 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define KP_MUL KP_MULTIPLY
#define KP_DIV KP_DIVIDE

// -----------------------------------------------------------------------------------------
// | 0   | 1   | 2   | 3   | 4   | 5   |   | 6   | 7   | 8   | 9   | 10  | 11  |
// | 12  | 13  | 14  | 15  | 16  | 17  |   | 18  | 19  | 20  | 21  | 22  | 23  |
// | 24  | 25  | 26  | 27  | 28  | 29  |   | 30  | 31  | 32  | 33  | 34  | 35  |
//                   | 36  | 37  | 38  |   | 39  | 40  | 41  |

#define KEYS_L 0 1 2 3 4 5  12 13 14 15 16 17  24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11  18 19 20 21 22 23  30 31 32 33 34 35
#define KEYS_T 36 37 38 39 40

/ {
	chosen {
		zmk,matrix_transform = &tbk_mini_transform;
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | CTRL |
// | BSPC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | ESC  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RET  |
			bindings = <
&kp TAB   &kp Q     &kp W     &kp E  &kp R  &kp T    &kp Y   &kp U     &kp I     &kp O   &kp P    &kp RCTRL
&kp BSPC  &kp A     &kp S     &kp D  &kp F  &kp G    &kp H   &kp J     &kp K     &kp L   &kp SEMI &kp SQT
&kp ESC   &kp Z     &kp X     &kp C  &kp V  &kp B    &kp N   &kp M     &kp COMMA &kp DOT &kp FSLH &kp RET
&kp LALT  &kp SPACE &mo 1                            &sl 2   &sk RSHFT &kp RALT
			>;
		};

		nav_layer {
// |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// |      | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
			bindings = <
&trans   &kp FSLH  &kp F2    &kp HASH  &kp F4    &kp F5        &kp INS   &kp PG_UP &kp UP    &kp PG_DN &kp PSCRN &none
&trans   &sk LGUI  &sk LALT  &sk LSHFT &sk LCTRL &sk RALT      &kp BSPC  &kp LEFT  &kp DOWN  &kp RIGHT &kp DEL   &none
&trans   &kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V) &kp RET       &kp K_APP &kp HOME  &kp SPACE &kp END   &none     &kp RET
&mo 3    &trans    &trans                                      &trans    &trans    &mo 3
			>;
		};

		num_layer {
// |  `   |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  =  |
// | BSPC |  !  |  $  |  {  |  }  |  %  |   |  +  |  -  |  [  |  ]  |  |  |  "  |
// | SHFT |  ~  |  &  |  [  |  ]  |  @  |   |  *  |  _  |  <  |  >  |  /  |  \  |
			bindings = <
&kp GRAVE &kp N1    &kp N2    &kp N3    &kp N4    &kp N5        &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp EQUAL
&kp BSPC  &kp EXCL  &kp DLLR  &kp LBKT  &kp RBKT  &kp PRCNT     &kp PLUS  &kp MINUS &kp LPAR  &kp RPAR  &kp PIPE  &kp DQT
&kp LSHFT &kp TILDE &kp AMPS  &kp LBRC  &kp RBRC  &kp AT        &kp STAR  &kp UNDER &kp LT    &kp GT    &kp FSLH  &kp BSLH
&mo 3     &trans    &trans                                      &trans    &trans    &mo 3
			>;
		};

		fun_layer {
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
			bindings = <
&none      &kp F1       &kp F2       &kp F3       &kp F4       &kp F5         &kp F6    &kp F7    &kp F8    &kp F9    &kp F10   &kp F11
&none      &kp LGUI     &kp LALT     &kp LSHFT    &kp LCTRL    &kp RALT       &kp RALT  &kp RCTRL &kp RSHFT &kp LALT  &kp RGUI  &kp F12
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &none     &none     &none     &none     &none     &none
&none      &none        &none                                                 &none     &none     &none
			>;
		};
	};
};

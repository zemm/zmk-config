/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define NAV 1
#define NUM 2
#define FUN 3

// Modifiers for left/right side
#define LM1 LGUI
#define LM2 LSHFT
#define LM3 LALT
#define LM4 LCTRL
#define RM1 RCTRL
#define RM2 LALT
#define RM3 RSHFT
#define RM4 RGUI

// Shortenings
#define KP_MUL KP_MULTIPLY
#define KP_DIV KP_DIVIDE

/ {
	behaviors {
		dk: double-key {
			compatible = "zmk,behavior-hold-tap";
			label = "DOUBLE_KEY";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <100>;
			#global-quick-tap;
			bindings = <&kp>, <&kp>;
		};
		hm: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <150>;
			quick_tap_ms = <150>;
			bindings = <&kp>, <&kp>;
		};
		lm: left_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-unless-interrupted";
			tapping-term-ms = <100>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <6 7 8 9 10 11  18 19 20 21 22 23  34 35 36 37 38 39>;
		};
		rm: right_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-unless-interrupted";
			tapping-term-ms = <100>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5  12 13 14 15 16 17  24 25 26 27 28 29>;
		};
	};

// -----------------------------------------------------------------------------------------
// | 0   | 1   | 2   | 3   | 4   | 5   |   | 6   | 7   | 8   | 9   | 10  | 11  |
// | 12  | 13  | 14  | 15  | 16  | 17  |   | 18  | 19  | 20  | 21  | 22  | 23  |
// | 24  | 25  | 26  | 27  | 28  | 29  |   | 30  | 31  | 32  | 33  | 34  | 35  |
//                   | 36  | 37  | 38  |   | 39  | 40  | 41  |

//	combos {
//		compatible = "zmk,combos";
//
//		combo_caps_word_shifts {
//			timeout-ms = <15>;
//			bindings = <&caps_word>;
//			key-positions = <24 35>;
//			layers = <0>;
//		};
//	};

	keymap {
		compatible = "zmk,keymap";

// Colemak on OS side
// -----------------------------------------------------------------------------------------
// |     |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |     |
// |     |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '  |
// |     |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |     |
// -----------------------------------------------------------------------------------------
		default_layer {
			bindings = <
	&kp RA(Q)     &hm LM1 Q &hm LM2 W &hm LM3 E &hm LM4 R &kp T     &kp Y   &hm RM1 U &hm RM2 I &hm RM3 O &hm RM4 P    &kp RA(P)
	&kp BSPC      &lm LM1 A &lm LM2 S &lm LM3 D &lm LM4 F &kp G     &kp H   &rm RM1 J &rm RM2 K &rm RM3 L &rm RM4 SEMI &kp SQT
	&mt LSHFT ESC &kp Z     &kp X     &kp C     &kp V     &kp B     &kp N   &kp M     &kp COMMA &kp DOT   &kp FSLH     &kp RSHFT
	&mo FUN       &kp SPACE &mo NAV                                 &mo NAV &mo NUM   &kp RET
			>;
		};

		navigation_layer {
			bindings = <
	&kp TAB  &kp LC(LS(Z)) &none     &sk RALT  &kp LC(R)  &kp RET        &kp INS   &kp PG_UP &kp UP   &kp PG_DN &kp RS(TAB) &kp TAB
	&trans   &sk LM1       &sk LM2   &sk LM3   &sk LM4    &kp DEL        &kp HOME  &kp LEFT  &kp DOWN &kp RIGHT &kp END     &kp SPACE
	&trans   &kp LC(Z)     &kp LC(X) &kp LC(C) &kp LC(V)  &kp LC(LS(V))  &none     &sk RCTRL &sk RALT &sk RSHFT &sk RGUI    &trans
	&trans   &trans        &trans                                        &trans    &trans    &trans
			>;
		};

// Could add: _ " < > / ?
// TODO: move numbers to left, because of mouse
// -----------------------------------------------------------------------------------------
// | â‚¬   | |   | $   | {   | }   | ^   |   |     | 7   | 8   | 9   | -   | =   |
// | ~   | #   | &   | (   | )   | `   |   | %   | 4   | 5   | 6   | 0   | +   |
// |     | \   | !   | [   | ]   | @   |   | *   | 1   | 2   | 3   | .   | ,   |
// -----------------------------------------------------------------------------------------
		number_layer {
			bindings = <
	&kp RA(N5) &kp PIPE      &kp DLLR      &kp LBRC      &kp RBRC      &kp CARET     &none     &kp N7  &kp N8  &kp N9  &kp MINUS &kp EQUAL
	&kp TILDE  &mt LM1 HASH  &mt LM2 AMPS  &mt LM3 LPAR  &mt LM4 RPAR  &kp GRAVE     &kp PRCNT &kp N4  &kp N5  &kp N6  &kp N0    &kp PLUS
	&trans     &kp BSLH      &kp EXCL      &kp LBKT      &kp RBKT      &kp AT        &kp STAR  &kp N1  &kp N2  &kp N3  &kp DOT   &kp COMMA
	&trans     &trans        &trans                                                  &trans    &trans  &trans
			>;
		};

		function_layer {
			bindings = <
	&kp C_VOL_UP &kp C_MUTE   &kp C_PREV   &kp C_PLAY_PAUSE &kp C_NEXT   &kp PSCRN        &none  &kp F7 &kp F8 &kp F9 &kp F12 &none
	&kp C_VOL_DN &kp LM1      &kp LM2      &kp LM3          &kp LM4      &out OUT_TOG     &none  &kp F4 &kp F5 &kp F6 &kp F11 &none
	&trans       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2     &bt BT_SEL 3 &bt BT_CLR       &none  &kp F1 &kp F2 &kp F3 &kp F10 &none
	&trans       &trans       &trans                                                      &trans &trans &trans
			>;
		};

};

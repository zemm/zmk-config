/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

// https://github.com/joelspadin/zmk-locale-generator
// # include "keys_fi.h"
#include "keys_os_colemak.h"


#define DEF 0
#define SYM 1
#define NAV 2
#define NAVt 3
#define FUN 4
#define KPD 5

// Modifiers for left/right side
#define LM1 LGUI
#define LM2 LALT
#define LM3 LSHFT
#define LM4 LCTRL
#define RM1 RCTRL
#define RM2 RSHFT
#define RM3 LALT
#define RM4 RGUI

// Shortenings
#define KP_MUL KP_MULTIPLY
#define KP_DIV KP_DIVIDE
#define EURO RA(N5)
#define ___

#define KEYS_LEFT 0 1 2 3 4 5  12 13 14 15 16 17  24 25 26 27 28 29
#define KEYS_RIGHT 6 7 8 9 10 11  18 19 20 21 22 23  30 31 32 33 34 35
#define THUMBS 36 37 38 39 40

/ {
	behaviors {
		// layer tap - hold preferred
		lth: behavior_layer_tap_hold_preferred {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TAP_HOLD_PREFERRED";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <180>;
			quick_tap_ms = <150>;
			bindings = <&mo>, <&kp>;
		};
		// layer tap - tap preferred
		ltt: behavior_layer_tap_tap_preferred {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TAP_TAP_PREFERRED";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick_tap_ms = <250>;
			bindings = <&mo>, <&kp>;
		};

		// https://github.com/urob/zmk-config
		lm: left_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>; // repeat on tap-into-hold
			global-quick-tap;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
			hold-trigger-on-release; // delay positional check until key-release
		};
		rm: right_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <175>; // repeat on tap-into-hold
			global-quick-tap;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
			hold-trigger-on-release; // delay positional check until key-release
		};

		// Layers with mods
		ms: momentary_sym_mod_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "MOMENTARY_SYM_MOD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick-tap-ms = <250>;
			global-quick-tap;
			bindings = <&sym_with_mod>, <&kp>;
		};
		mn: momentary_nav_mod_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "MOMENTARY_NAV_MOD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick-tap-ms = <250>;
			global-quick-tap;
			bindings = <&nav_with_mod>, <&kp>;
		};
		// Tap dance
		td_nav_kp: tap_dance_nav_keypad {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_NAV_KEYPAD";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&mo NAV>, <&mo KPD>;
		};
		td_nav_tog: tap_dance_nav_toggle {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_NAV_TOGGLE";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&mo NAV>, <&to NAV>;
		};
		//td_comma_commaspace: tap_dance_comma_commaspace {
		//	compatible = "zmk,behaviour-tap-dance";
		//	label = "TAP_DANCE_COMMA_COMMASPACE";
		//	#binding-cells = <0>;
		//	tapping-term-ms = <200>;
		//	bingings = <&mo COMMA>, <&comma_spc>;
		//};
	};

	// -----------------------------------------------------------------------------------------
	// | 0   | 1   | 2   | 3   | 4   | 5   |     | 6   | 7   | 8   | 9   | 10  | 11  |
	// | 12  | 13  | 14  | 15  | 16  | 17  |     | 18  | 19  | 20  | 21  | 22  | 23  |
	// | 24  | 25  | 26  | 27  | 28  | 29  |     | 30  | 31  | 32  | 33  | 34  | 35  |
	//                         | 36  | 37  | 38  | 39  | 40  |
	combos {
		compatible = "zmk,combos";
	};

	macros {
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
		ZMK_MACRO1(nav_with_mod,
			wait-ms = <0>;
			bindings
				= <&macro_press &mo NAV>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_release &mo NAV>
			;
		)
		ZMK_MACRO1(sym_with_mod,
			wait-ms = <0>;
			bindings
				= <&macro_press &mo SYM>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_release &mo SYM>
			;
		)
		// String macros
		ZMK_MACRO(comma_spc, bindings = <&kp COMMA &kp SPACE>;)
	};

	// Keymap assumes Colemak on OS side, as I also use regular keyboards
	keymap {
		compatible = "zmk,keymap";

// |     |  Q  |  W  |  F  |  P  |  G  |   |  J  |  L  |  U  |  Y  |  Ö  |  Ä  |
// |     |  A  |  R  |  S  |  T  |  D  |   |  H  |  N  |  E  |  I  |  O  |  '  |
// |     |  Z  |  X  |  C  |  V  |  B  |   |  K  |  M  |  ,  |  .  |  /  |     |
		alpha_layer {
			bindings = <
&lt KPD TAB    &mn LM1 OC_Q &mn LM2 OC_W &mn LM3 OC_F &mn LM4 OC_P &mn RALT OC_G ___  &ms RALT OC_J &ms RM1 OC_L &ms RM2 OC_U &ms RM3 OC_Y &ms RM4 OC_O_UMLAUT &kp OC_A_UMLAUT
&kp BSPC       &lm LM1 OC_A &lm LM2 OC_R &lm LM3 OC_S &lm LM4 OC_T &lm RALT OC_D ___  &rm RALT OC_H &rm RM1 OC_N &rm RM2 OC_E &rm RM3 OC_I &rm RM4 OC_O        &kp SQT
&mt LSHFT ESC  &kp OC_Z     &kp OC_X     &mn 0 OC_C   &kp OC_V     &kp OC_B      ___  &kp OC_K      &kp OC_M     &ms 0 COMMA  &kp DOT      &kp FSLH            &mt RSHFT RET
&lth KPD RET   &kp SPACE    &td_nav_kp   &sl SYM      &sym_with_mod RSHFT
			>;
		};
//&lth KPD RET   &kp SPACE    &td_nav_kp   &sl SYM      &sym_with_mod RSHFT

// Numbers on the left, because of mouse on the right hand
// | `   | 1   | 2   | 3   | 4   | 5   |   | &   | $   | {   | }   | ;   | =   |
// |     | 6   | 7   | 8   | 9   | 0   |   | #   | -   | (   | )   | |   | "   |
// | €   | -   | +   | ,   | .   | /   |   | ~   | _   | [   | ]   | ?   | \   |
		symbol_layer {
			bindings = <
&kp GRAVE      &kp N1     &kp N2     &kp N3     &kp N4     &kp N5      ___ &rm RALT AMPS &rm RM1 DOLLAR &rm RM2 LBRC &rm RM3 RBRC  &rm RM4 OC_SEMI &kp EQUAL
&trans         &lm LM1 N6 &lm LM2 N7 &lm LM3 N8 &lm LM4 N9 &lm RALT N0 ___ &rm RALT HASH &rm RM1 MINUS  &rm RM2 LPAR &rm RM3 RPAR  &rm RM4 PIPE    &kp DQT
&mt LSHFT STAR &kp MINUS  &kp PLUS   &kp COMMA  &kp DOT    &kp FSLH    ___ &kp TILDE     &kp UNDER      &kp LBKT     &rm RALT RBKT &kp RS(FSLH)    &mt RSHFT BSLH
&comma_spc     &kp SPACE  &kp DOT    &comma_spc &trans
			>;
		};
		
		navigation_layer {
			bindings = <
&trans  &lm LM1 FSLH &lm LM2 SPACE &lm LM3 HASH &lm LM4 SPACE &lm RALT F4  ___  &kp INS   &kp PG_UP  &kp UP     &kp PG_DN  &none    &kp ESC
&trans  &sk LM1      &sk LM2       &sk LM3      &sk LM4       &lm RALT DEL ___  &kp BSPC  &kp LEFT   &kp DOWN   &kp RIGHT  &none    &kp DEL
&trans  &kp LC(Z)    &kp LC(X)     &kp LC(C)    &kp LC(V)     &kp RET      ___  &none     &kp HOME   &kp SPACE  &kp END    &kp FSLH &trans
&trans  &kp SPACE    &trans        &kp SPACE    &tog FUN
			>;
		};

		navigation_tog_layer {
			bindings = <
&trans  &trans  &trans  &trans  &trans  &trans ___ &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans ___ &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans ___ &trans  &trans  &trans  &trans  &trans  &trans
&to DEF &trans  &to DEF &trans  &to DEF
			>;
		};

		function_layer {
			bindings = <
&rgb_ug RGB_TOG &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &sys_reset  ___  &kp C_VOL_UP     &kp F1  &kp F2  &kp F3  &kp F4  &kp PAUSE_BREAK
&none           &kp LM1         &kp LM2         &kp LM3         &kp LM4         &kp RALT    ___  &kp C_VOL_DN     &kp F5  &kp F6  &kp F7  &kp F8  &kp PRINTSCREEN
&to DEF         &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &bootloader ___  &kp C_PLAY_PAUSE &kp F9  &kp F10 &kp F11 &kp F12 &unstick
&none           &none           &to DEF         &none           &tog FUN
			>;
		};

		keypad_layer {
			bindings = <
&trans    &kp LALT   &kp PG_UP  &kp UP    &kp PG_DN  &none    ___  &kp KP_NLCK &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS &kp KP_DIVIDE
&trans    &kp LCTRL  &kp LEFT   &kp DOWN  &kp RIGHT  &kp DEL  ___  &none       &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS  &kp KP_MULTIPLY
&trans    &kp LGUI   &kp COMMA  &kp SPACE &kp DOT    &kp RET  ___  &kp KP_DOT  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER &kp KP_ENTER
&tog KPD  &trans     &trans                                   ___  &kp KP_N0   &kp KP_DOT
			>;
		};

	};
};

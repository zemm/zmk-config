/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define NAV 1
#define NUM 2
#define FUN 3
#define KPD 4

// Modifiers for left/right side
#define LM1 LGUI
#define LM2 LALT
#define LM3 LSHFT
#define LM4 LCTRL
#define RM1 RCTRL
#define RM2 RSHFT
#define RM3 LALT
#define RM4 RGUI

// Shortenings
#define KP_MUL KP_MULTIPLY
#define KP_DIV KP_DIVIDE

/ {
	behaviors {
		// layer tap - hold preferred
		lth: behavior_layer_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <180>;
			quick_tap_ms = <150>;
			bindings = <&mo>, <&kp>;
		};
		// layer tap - tap preferred
		ltt: behavior_layer_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <180>;
			quick_tap_ms = <150>;
			bindings = <&mo>, <&kp>;
		};
		hm: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick_tap_ms = <250>;
			bindings = <&kp>, <&kp>;
		};
		lm: left_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick-tap-ms = <250>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <6 7 8 9 10 11  18 19 20 21 22 23  30 31 32 33 34 35>;
		};
		rm: right_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <300>;
			quick-tap-ms = <250>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5  12 13 14 15 16 17  24 25 26 27 28 29>;
		};
	};

// -----------------------------------------------------------------------------------------
// | 0   | 1   | 2   | 3   | 4   | 5   |   | 6   | 7   | 8   | 9   | 10  | 11  |
// | 12  | 13  | 14  | 15  | 16  | 17  |   | 18  | 19  | 20  | 21  | 22  | 23  |
// | 24  | 25  | 26  | 27  | 28  | 29  |   | 30  | 31  | 32  | 33  | 34  | 35  |
//                   | 36  | 37  | 38  |   | 39  | 40  | 41  |
	combos {
		compatible = "zmk,combos";
		combo_to_fun {
			//timeout-ms = <20>;
			bindings = <&mo FUN>;
			key-positions = <36 41>;
			layers = <DEF>;
		};
		// left hand triplets
		combo_print_screen {
			timeout-ms = <20>;
			bindings = <&kp PRINTSCREEN>;
			key-positions = <2 3 4>;
		};
		combo_keypad {
			timeout-ms = <20>;
			bindings = <&mo KPD>;
			key-positions = <14 15 16>;
			layers = <DEF>;
		};
		combo_scroll_lock {
			timeout-ms = <20>;
			bindings = <&kp SCROLLLOCK>;
			key-positions = <25 26 27>;
		};
		// right hand triplets
		combo_pause_break {
			timeout-ms = <20>;
			bindings = <&kp PAUSE_BREAK>;
			key-positions = <7 8 9>;
		};
		combo_caps_word_right {
			timeout-ms = <20>;
			bindings = <&caps_word>;
			key-positions = <19 20 21>;
			layers = <DEF>;
		};
		combo_caps_lock {
			timeout-ms = <20>;
			bindings = <&kp CAPSLOCK>;
			key-positions = <31 32 33>;
		};
		combo_sysreq {
			timeout-ms = <20>;
			bindings = <&kp SYSREQ>;
			key-positions = <8 9 10>;
		};
	};

	macros {
		ZMK_MACRO(comma_space, bindings = <&kp COMMA &kp SPACE>;)
	};

	keymap {
		compatible = "zmk,keymap";

// Colemak on OS side
// -----------------------------------------------------------------------------------------
// |     |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |     |
// |     |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '  |
// |     |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |     |
// -----------------------------------------------------------------------------------------
		default_layer {
			bindings = <
	&kp ESC       &kp Q     &kp W     &kp E     &kp R     &kp T     &kp Y   &kp U     &kp I     &kp O     &kp P        &kp RA(Q)
	&kp BSPC      &lm LM1 A &lm LM2 S &lm LM3 D &lm LM4 F &kp G     &kp H   &rm RM1 J &rm RM2 K &rm RM3 L &rm RM4 SEMI &kp SQT
	&mt LSHFT TAB &kp Z     &kp X     &kp C     &kp V     &kp B     &kp N   &kp M     &kp COMMA &kp DOT   &kp FSLH     &mt RSHFT RA(P)
	&lth NUM RET   &ltt NAV SPACE &mo NAV                             &lth NAV RET &lth NUM SPACE &key_repeat
			>;
		};

		navigation_layer {
			bindings = <
	&kp ESC     &none         &sk RALT  &none     &none      &kp RET        &kp INS   &kp PG_UP &kp UP    &kp PG_DN &kp RS(TAB) &kp TAB
	&trans      &sk LM1       &sk LM2   &sk LM3   &sk LM4    &kp DEL        &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT &kp END     &kp SPACE
	&kp TAB     &kp LC(Z)     &kp LC(X) &kp LC(C) &kp LC(V)  &kp LC(LS(V))  &none     &sk RCTRL &sk RSHFT &sk RALT  &sk RGUI    &trans
	&trans      &trans        &trans                                        &trans    &kp SPACE &trans
			>;
		};

// Numbers on the left, because of mouse on the right hand
// -----------------------------------------------------------------------------------------
// | ~   | +   | 7   | 8   | 9   | %   |   | ^   | $   | {   | }   | _   | -   |
// |     | 0   | 4   | 5   | 6   | .   |   | `   | |   | (   | )   | ;   | "   |
// | â‚¬   | =   | 1   | 2   | 3   | !   |   | \   | &   | [   | ]   | /   | *   |
// -----------------------------------------------------------------------------------------
		number_layer {
			bindings = <
	&kp TILDE  &kp PLUS   &kp N7     &lm RALT N8 &kp N9     &kp PRCNT     &kp CARET &kp DOLLAR   &kp LBRC     &rm RALT RBRC &kp UNDER    &kp MINUS
	&trans     &lm LM1 N0 &lm LM2 N4 &lm LM3 N5  &lm LM4 N6 &kp DOT       &kp GRAVE &rm RM1 PIPE &rm RM2 LPAR &rm RM3 RPAR  &rm RM4 SEMI &kp DQT
	&kp RA(N5) &kp EQUAL  &kp N1     &kp N2      &kp N3     &kp EXCL      &kp BSLH  &kp AMPS     &kp LBKT     &kp RBKT      &trans       &kp STAR
	&trans     &kp SPACE  &comma_space                                    &comma_space  &kp SPACE  &trans
			>;
		};

		function_layer {
			bindings = <
	&kp C_VOL_UP &kp C_MUTE   &kp C_PREV   &kp C_PLAY_PAUSE &kp C_NEXT   &kp PSCRN        &none  &kp F7 &kp F8 &kp F9 &kp F12 &none
	&kp C_VOL_DN &kp LM1      &kp LM2      &kp LM3          &kp LM4      &out OUT_TOG     &none  &kp F4 &kp F5 &kp F6 &kp F11 &none
	&none        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2     &bt BT_SEL 3 &bt BT_CLR       &none  &kp F1 &kp F2 &kp F3 &kp F10 &none
	&trans       &trans       &trans                                                      &trans &trans &trans
			>;
		};

		keypad_layer {
			bindings = <
	&trans    &trans    &trans  &trans  &trans  &trans       &kp KP_NLCK &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS &kp KP_DIVIDE
	&trans    &kp LSHFT &trans  &trans  &trans  &trans       &none       &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS  &kp KP_MULTIPLY
	&trans    &trans    &trans  &trans  &trans  &trans       &none       &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT   &kp KP_ENTER
	&kp LCTRL &kp SPACE &kp LALT                             &kp LALT    &kp KP_N0  &trans
			>;
		};
	};
};
